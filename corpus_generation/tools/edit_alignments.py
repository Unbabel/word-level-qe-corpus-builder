"""
This assumes data is generated by format_tercom.py
"""
import sys
import parse_pra_xml
import codecs


def read_file(file_path):
    with codecs.open(file_path, 'r', "utf-8") as fid:
        return [line.rstrip().split() for line in fid.readlines()]


assert len(sys.argv[:1]) == 1, "Expected one argument"
(
    in_tercom_xml, in_mt_original, in_pe_original, out_align
) = sys.argv[1:]

# Read original files
mt_original = read_file(in_mt_original)
pe_original = read_file(in_pe_original)

# Parse tercom HTML
mt_tokens, pe_tokens, edits, hters = parse_pra_xml.parse_file(in_tercom_xml)

# Sanity check: Original and tercom files match in number of tokens
# Note that we will not use the tokenized tercom outputs only the alignments
nr_sentences = len(mt_tokens)
for index in range(nr_sentences):
    assert len(mt_original[index]) == len([x for x in mt_tokens[index] if x]), \
        "Lengths do  not match"
    assert len(pe_original[index]) == len([x for x in pe_tokens[index] if x]), \
        "Lengths do  not match"

edit_alignments = []

for sent_index, sent_edits in enumerate(edits):
    
    pe_original_index = 0
    mt_original_index = 0
    edit_alignments_sent = []
    sent_edit_actions = []
    for edit in sent_edits:

        # Store edit action
        sent_edit_actions.append(edit.o)

        if edit.o == 'C':

            # Sanity check
            # NOTE: Tercom ignores unless -s is used
            if (
                mt_original[sent_index][mt_original_index].lower() !=
                pe_original[sent_index][pe_original_index].lower()
            ):
                raise Exception("Reading Tercom xml failed")

            edit_alignments_sent.append("-".join([
                str(pe_original_index),
                str(mt_original_index)
            ]))
            pe_original_index += 1
            mt_original_index += 1

        elif edit.o == 'S':

            edit_alignments_sent.append("-".join([
                str(pe_original_index),
                str(mt_original_index)
            ]))
            pe_original_index += 1
            mt_original_index += 1

        elif edit.o == 'I':

            edit_alignments_sent.append("-".join([str(pe_original_index), '']))
            pe_original_index += 1

        elif edit.o == 'D':

            edit_alignments_sent.append("-".join(['', str(mt_original_index)]))
            mt_original_index += 1

        else:
            raise Exception("Uknown edit %s" % edit.o)

    edit_alignments.append(edit_alignments_sent)

with codecs.open(out_align, 'w', 'utf-8') as fid:
    print("writing to " + str(out_align))
    for sent_edits in edit_alignments:
        fid.write("%s\n" % (" ".join(sent_edits)))
 
